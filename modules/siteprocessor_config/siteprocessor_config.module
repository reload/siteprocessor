<?php

/**
 * Implements hook_menu().
 *
 * Dynamic generate tabs for the siteprocessor.
 * In module info file, create an entry like
 * siteprocessor[part1].... = partN
 * A part1 tab will show up, and a custom form
 * 'siteprocessor_config_part1_form' will be accessible.
 */
function siteprocessor_config_menu() {
  $items['admin/config/siteprocessor'] = array(
    'title' => 'SiteProcessor',
    'access callback' => 'user_access',
    'access arguments' => array('administer siteprocessor configuration'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
    'weight' => -20,
  );

  $items['admin/config/siteprocessor/theme/enable'] = array(
    'title' => 'Set default theme',
    'page callback' => 'siteprocessor_config_set_theme_default',
    'access arguments' => array('administer siteprocessor theme configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/siteprocessor/theme/default'] = array(
    'title' => 'Set default theme',
    'page callback' => 'siteprocessor_config_set_theme_default',
    'access arguments' => array('administer siteprocessor theme configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/siteprocessor/config'] = array(
    'title' => 'Base configuration',
    'description' => 'Base website configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_variable_form'),
    'access arguments' => array('administer siteprocessor configuration'),
  );

  // Fetch info from modules info files
  $configuration_parts = _siteprocessor_config_get_config('siteprocessor');
  $first_attempt = TRUE;

  // Dynamic generate admin page tabs.
  foreach ($configuration_parts as $item => $array) {
    if(function_exists('siteprocessor_config_' . $item . '_form') || $item == 'theme'){
      $items['admin/config/siteprocessor/config/' . $item] = array(
        'title' => $item . ' configuration',
        'description' => 'Base website configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('siteprocessor_config_' . $item . '_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer siteprocessor ' . $item . ' configuration'),
        'type' => $first_attempt ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => $first_attempt ? -20 : 0,
      );
    }  
    if ($item == 'theme') {
      $items['admin/config/siteprocessor/config/theme']['page callback'] = 'siteprocessor_config_theme_page';
      unset($items['admin/config/siteprocessor/config/theme']['page arguments']);
    }
    $first_attempt = FALSE;
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function siteprocessor_config_permission() {
  $configuration_parts = _siteprocessor_config_get_config('siteprocessor');
  $permission_parts = array('administer siteprocessor configuration' => array(
    'title' => t('Administer SiteProcessor configuration'),
    'description' => t('Configure siteprocessor'),
  ));
  foreach ($configuration_parts as $item => $array) {
    if(function_exists('siteprocessor_config_' . $item . '_form') || $item == 'theme'){
      $permission_parts['administer siteprocessor ' . $item . ' configuration'] = array(
        'title' => t('Administer SiteProcessor ' . $item . ' configuration'),
        'description' => t('Configure siteprocessor ' . $item . 's'),
      );
    }
  }
  return $permission_parts;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * If a new site have been set up, the one-time-login is presented, UID = 1, and the form havent been submitted before
 * Then change the submit handler.
 *
 */
function siteprocessor_config_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if (array_key_exists('pass-reset-token', $_GET) && user_access('administer site configuration') && $user->uid == 1 && !variable_get('siteprocessor_setup', FALSE)) {
    $form['#submit'] = array('user_profile_form_submit', 'siteprocessor_config_form_user_profile_form_submit');
  }
}

/**
 * Custom form submit handler for user profile form.
 * Only used if site havent been setup.
 * Redirect to the config page.
 */
function siteprocessor_config_form_user_profile_form_submit($form, &$form_state) {
  drupal_set_message(t('Use time to set the system up.'));
  variable_set('siteprocessor_setup', TRUE);
  $form_state['redirect'] = 'admin/config/siteprocessor/config';
}

/**
 * Create custom form for 'variable' defined in hook_menu.
 *
 * This form will save entries into variable table, and will be used for
 * a simple shortcut page to handle variables.
 *
 * In this module's info file, add entries for every variable you want to handle.
 * siteprocessor[variable][MODULENAME][VARIABLE_KEY] = VARIABLE_LABEL_TEXT
 */
function siteprocessor_config_variable_form($form_state) {
  $form_config = _siteprocessor_config_get_config('siteprocessor');
  $config_variable = $form_config['variable'][0];
  $form = array();
  foreach ($config_variable as $module => $module_key) {
    // Dont show configuration for module, unless it's enabled
    if (!module_exists($module)) {
      continue;
    }
    $form[$module] = array(
      '#type' => 'fieldset',
      '#title' => str_replace('_', ' ', t($module)),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    foreach ($module_key as $variable => $part) {

      $form[$module][$variable] = array(
        '#type' => 'textfield',
        '#title' => $part,
        '#default_value' => variable_get($variable, NULL),
      );

      // Collapse the configuration block if it's not configured.
      if (variable_get($variable, FALSE)) {
        $form[$module]['#collapsed'] = FALSE;
      }
    }
  }

  if ($form) {
    return system_settings_form($form);
  }
}

/**
 * Create custom form for 'layout' im hook_menu.
 * In a siteprocessor_layout_* modules info file, define the layout.
 */
function siteprocessor_config_layout_form($form_state) {
  $form_config = _siteprocessor_config_get_config('siteprocessor');
  $form = array();
  $radios = array();
  $form['text'] = array(
    '#markup' => t('Define which layout to be default.'),
  );
  foreach ($form_config['layout'] as $entry) {
    foreach ($entry as $module_name => $string) {
        $radios[$module_name] = theme('image', array('path' => drupal_get_path('module', $module_name) . '/' . $module_name . '_layout.jpg')) . $string;
    }
  }

  $form['siteprocessor_layout'] = array(
    '#type' => 'radios',
    '#title' => 'Choose layout',
    '#default_value' => variable_get('siteprocessor_layout', FALSE),
    '#options' => $radios,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

/**
 * Submit handler for custom 'layout' form.
 */
function siteprocessor_config_layout_form_submit(&$form, &$form_state) {
  if (variable_get('siteprocessor_layout', NULL) !== $form_state['values']['siteprocessor_layout']) {
    variable_set('siteprocessor_layout', $form_state['values']['siteprocessor_layout']);

    $form_config = _siteprocessor_config_get_config('siteprocessor');
    foreach ($form_config['layout'] as $entry) {
      foreach ($entry as $module_name => $module_info) {
        if ($module_name != $form_state['values']['siteprocessor_layout']) {
          module_disable(array($module_name));
        }
        else {
          if (module_enable(array($module_name))) {
            drupal_set_message(t('Layout "@module" has been enabled.', array('@module' => $module_info)), 'status');
          }
        }
      }
    }
    cache_clear_all();
  }
}

/**
 * Custom callback function for the theme page
 * Which toggle themes en/disabled.
 */
function siteprocessor_config_theme_page() {
  $form_config = _siteprocessor_config_get_config('siteprocessor');
  $siteprocessor_themes = array_unique(call_user_func_array('array_merge', $form_config['theme']));
  $all_themes = system_rebuild_theme_data();
  $themes = array_intersect_key($all_themes, $siteprocessor_themes);

  $theme_default = variable_get('theme_default', 'kaykay');
  $theme_groups  = array();

  foreach ($themes as &$theme) {
    if (!empty($theme->info['hidden'])) {
      continue;
    }
    $admin_theme_options[$theme->name] = $theme->info['name'];
    $theme->is_default = ($theme->name == $theme_default);

    // Identify theme screenshot.
    $theme->screenshot = NULL;
    // Create a list which includes the current theme and all its base themes.
    if (isset($themes[$theme->name]->base_themes)) {
      $theme_keys = array_keys($themes[$theme->name]->base_themes);
      $theme_keys[] = $theme->name;
    }
    else {
      $theme_keys = array($theme->name);
    }
    // Look for a screenshot in the current theme or in its closest ancestor.
    foreach (array_reverse($theme_keys) as $theme_key) {
      if (isset($themes[$theme_key]) && file_exists($themes[$theme_key]->info['screenshot'])) {
        $theme->screenshot = array(
          'path' => $themes[$theme_key]->info['screenshot'],
          'alt' => t('Screenshot for !theme theme', array('!theme' => $theme->info['name'])),
          'title' => t('Screenshot for !theme theme', array('!theme' => $theme->info['name'])),
          'attributes' => array('class' => array('screenshot')),
        );
        break;
      }
    }

    if (empty($theme->status)) {
     // Ensure this theme is compatible with this version of core.
     // Require the 'content' region to make sure the main page
     // content has a common place in all themes.
      $theme->incompatible_core = !isset($theme->info['core']) || ($theme->info['core'] != DRUPAL_CORE_COMPATIBILITY) || (!isset($theme->info['regions']['content']));
      $theme->incompatible_php = version_compare(phpversion(), $theme->info['php']) < 0;
    }
    $query['token'] = drupal_get_token('system-theme-operation-link');
    $theme->operations = array();
    if (!empty($theme->status) || !$theme->incompatible_core && !$theme->incompatible_php) {
      // Create the operations links.
      $query['theme'] = $theme->name;
      if (!empty($theme->status)) {
        if (!$theme->is_default) {
          $theme->operations[] = array(
            'title' => t('Set default'),
            'href' => 'admin/config/siteprocessor/theme/default',
            'query' => $query,
            'attributes' => array('title' => t('Set !theme as default theme', array('!theme' => $theme->info['name']))),
          );
        }
      }
      else {
        $theme->operations[] = array(
          'title' => t('Enable and set default'),
          'href' => 'admin/config/siteprocessor/theme/enable',
          'query' => $query,
          'attributes' => array('title' => t('Enable !theme as default theme', array('!theme' => $theme->info['name']))),
        );
      }
    }

    // Add notes to default and administration theme.
    $theme->notes = array();
    $theme->classes = array();
    if ($theme->is_default) {
      $theme->classes[] = 'theme-default';
      $theme->notes[] = t('default theme');
    }

    // Sort enabled and disabled themes into their own groups.
    $theme_groups[$theme->status ? 'enabled' : 'disabled'][] = $theme;
  }

  // There are two possible theme groups.
  $theme_group_titles = array(
    'enabled' => format_plural(count($theme_groups['enabled']), 'Enabled theme', 'Enabled themes'),
  );
  if (!empty($theme_groups['disabled'])) {
    $theme_group_titles['disabled'] = format_plural(count($theme_groups['disabled']), 'Disabled theme', 'Disabled themes');
  }

  drupal_alter('system_themes_page', $theme_groups);

  return theme('system_themes_page', array('theme_groups' => $theme_groups, 'theme_group_titles' => $theme_group_titles));

}

/**
 * Callback function to enable a theme, and redirect back to siteprocessor config page
 */
function siteprocessor_config_set_theme_default() {
  if (isset($_REQUEST['theme']) && isset($_REQUEST['token']) && drupal_valid_token($_REQUEST['token'], 'system-theme-operation-link')) {
    $theme = $_REQUEST['theme'];
    // Get current list of themes.
    $themes = list_themes();

    // Check if the specified theme is one recognized by the system.
    if (!empty($themes[$theme])) {
      // Enable the theme if it is currently disabled.
      if (empty($themes[$theme]->status)) {
       theme_enable(array($theme));
      }
      // Set the default theme.
      variable_set('theme_default', $theme);

      // Rebuild the menu. This duplicates the menu_rebuild() in theme_enable().
      // However, modules must know the current default theme in order to use
      // this information in hook_menu() or hook_menu_alter() implementations,
      // and doing the variable_set() before the theme_enable() could result
      // in a race condition where the theme is default but not enabled.
      menu_rebuild();

        drupal_set_message(t('%theme is now the default theme.', array('%theme' => $themes[$theme]->info['name'])));
    }
    else {
      drupal_set_message(t('The %theme theme was not found.', array('%theme' => $theme)), 'error');
    }
    drupal_goto('admin/config/siteprocessor/config/theme');
  }
  return drupal_access_denied();
}

/**
 * Fetch module info file from all modules prefixed with 'siteprocessor_'
 * and all themes.
 *
 * @param String $type which part of info file to return
 * @return Array info file parts.
 */
function _siteprocessor_config_get_config($type = NULL) {
  $return_config = array();
  $result = db_query("SELECT filename, name FROM {system} WHERE name LIKE 'siteprocessor_%' OR type = 'theme'");
  foreach ($result as $record) {
    $config = drupal_parse_info_file(dirname($record->filename) . '/' . $record->name . '.info');
    if ($type && array_key_exists($type, $config)) {
      if (is_array($config[$type])) {
      foreach ($config[$type] as $config_type => $array) {}
        $return_config[$config_type][] = $array;
      }
    }
  }

  return $return_config;
}

