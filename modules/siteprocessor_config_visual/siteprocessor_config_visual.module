<?php


/**
 * Implements hook_block_info().
 */
function siteprocessor_config_visual_block_info(){
  $blocks=array(
    'topblock' =>array(
      'info' => t('Top block'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'ownerblock' =>array(
      'info' => t('Owner block'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function siteprocessor_config_visual_block_view($delta){
  $block = array();
  switch ($delta) {
    case 'topblock':
      $block['subject'] = '';

      // Insert default site logo, if available.
      if ($image_fid = variable_get('siteprocessor_config_visual_top_image_fid', FALSE)) {
        $image = file_load($image_fid);
        $block['content']=l(theme('image_style', array('style_name' => 'toplogo_image', 'path' => $image->uri)), '<front>', array('html' => TRUE));
      }
      else {
        $block['content'] = user_access('administer site processor images') ? t('You can upload the site logo ') . l(t('right here'), 'admin/config/siteprocessor/config_visual/images') : '';
      }

      // Check if we're on a node view,
      // if so and the node has a page logo attached,
      // then replace the default logo.
      $path = arg();
      if ($path[0] == 'node' && isset($path[1]))  {
          $node = node_load($path[1]);
          if (isset($node->field_page_top_image[LANGUAGE_NONE][0]['fid'])) {
            $image = file_load($node->field_page_top_image[LANGUAGE_NONE][0]['fid']);
            $block['content']=l(theme('image_style', array('style_name' => 'toplogo_image', 'path' => $image->uri)), '<front>', array('html' => TRUE));
          }
      }
      break;
    case 'ownerblock':
      $block['subject'] = '';
      if ($image_fid = variable_get('siteprocessor_config_visual_owner_image_fid', FALSE)) {
        $image = file_load($image_fid);
        $block['content']=theme('image', array('path' => $image->uri));
      }
      else {
        $block['content'] = user_access('administer site processor images') ? t('You can upload the owner logo ') . l(t('right here'), 'admin/config/siteprocessor/config_visual/images') : '';
      }
      break;
  }
  return $block;
}

/**
 * Implement a custom form submit handler
 */
function siteprocessor_config_visual_images_form_submit($form, &$form_state) {
  _siteprocessor_config_visual_clear_css();
  //Saves or deletes top image (logo)
  if ($form_state['values']['siteprocessor_config_visual_top_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_top_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'top_image', 1);
    variable_set('siteprocessor_config_visual_top_image_fid', $file->fid);
    drupal_set_message(t('The top image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_top_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_top_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'top_image', 1);
      file_delete($file);
      drupal_set_message(t('The image @image_name was removed.', array('@image_name' => $file->filename)));
    }
    variable_set('siteprocessor_config_visual_top_image_fid', FALSE);
  }

  //Saves or deletes background image
  if ($form_state['values']['siteprocessor_config_visual_background_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_background_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'background_image', 1);
    variable_set('siteprocessor_config_visual_background_image_fid', $file->fid);
    drupal_set_message(t('The background image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_background_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_background_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'background_image', 1);
      file_delete($file);
      drupal_set_message(t('The background image @image_name was removed.', array('@image_name' => $file->filename)));
    }
    variable_set('siteprocessor_config_visual_background_image_fid', FALSE);
  }

  //Saves or deletes owner image
  if ($form_state['values']['siteprocessor_config_visual_owner_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_owner_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'owner_image', 1);
    variable_set('siteprocessor_config_visual_owner_image_fid', $file->fid);
    drupal_set_message(t('The background image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_owner_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_owner_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'owner_image', 1);
      file_delete($file);
      drupal_set_message(t('The owner image @image_name was removed.', array('@image_name' => $file->filename)));
    }
    variable_set('siteprocessor_config_visual_owner_image_fid', FALSE);
  }
}

/**
 * Implements hook_permission().
 */
function siteprocessor_config_visual_permission() {
  return array(
    'administer siteprocessor colors'=>array(
      'title'=>t('administer siteprocessor colors'),
      'description'=>t('administer siteprocessor colors'),
    ),
    'administer site processor images'=>array(
      'title'=>t('administer site processor images'),
      'description'=>t('administer site processor images'),
    ),
    'administer site processor custom css'=>array(
      'title'=>t('administer site processor custom css'),
      'description'=>t('administer site processor custom css'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function siteprocessor_config_visual_menu() {
  $items['admin/config/siteprocessor/config_visual'] = array(
    'title' => 'Visual configuration',
    'description' => 'Visual website configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_images_form'),
    'access arguments' => array('administer site processor images'),
    'file' => 'siteprocessor_config_visual.admin.inc',
  );


  $items['admin/config/siteprocessor/config_visual/images'] = array(
    'title' => 'Images',
    'description' => 'Images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_images_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site processor images'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/siteprocessor/config_visual/colors'] = array(
    'title' => 'Colors',
    'description' => 'Adjust colors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_colors_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer siteprocessor colors'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/siteprocessor/config_visual/custom_css'] = array(
    'title' => 'Custom CSS',
    'description' => 'Custom CSS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_custom_css_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site processor custom css'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function siteprocessor_config_visual_init() {
  global $theme_key;
  if (variable_get('theme_default','') == $theme_key) {
    // If the file does not exist.
    if (!file_exists(drupal_realpath('public://siteprocessor_config_visual.css'))) {
      _siteprocessor_config_visual_generate();
    }

    // Add css file.
    $url = parse_url(file_create_url('public://siteprocessor_config_visual.css'));
    $path = $url['path'];
    $add_css_opts = array(
      'type'       => 'file',
      'group'      => CSS_THEME,
      'every_page' => TRUE,
      'weight'     => 5000,
      'preprocess' => FALSE,
    );
    drupal_add_css($path, $add_css_opts);
  }
}

/**
 * Generate custom css-file.
 */
function _siteprocessor_config_visual_generate() {
  $css2add='';
  $css2add.=siteprocessor_config_visual_background_get_css()."\n";
  $css2add.=siteprocessor_config_visual_color_get_css()."\n";
  $css2add.=siteprocessor_config_visual_custom_get_css()."\n";
  file_save_data($css2add,'public://siteprocessor_config_visual.css',FILE_EXISTS_REPLACE);
  // The file just changed, make sure its effectuated.
  drupal_flush_all_caches();
}

//get custom css
function siteprocessor_config_visual_custom_get_css(){
  return variable_get('siteprocessor_config_visual_custom_css','');
}

/**
 * Implement a custom form submit handler
 */
function siteprocessor_config_visual_custom_css_form_submit($form, &$form_state) {
  variable_set('siteprocessor_config_visual_custom_css', $form_state['values']['siteprocessor_config_visual_custom_css']);
  _siteprocessor_config_visual_generate();
}

//get custom background
function siteprocessor_config_visual_background_get_css(){
  if ($image_fid = variable_get('siteprocessor_config_visual_background_image_fid', FALSE)) {
    $image = file_load($image_fid);
    $image_url=file_create_url($image->uri);
    return "
      body{
        background-image:url($image_url);
        background-position:top center;
        background-repeat:no-repeat;
      }
    ";
  }
  else return '';
}


/**
 * Implements a custom form submit handler.
 */
function siteprocessor_config_visual_colors_form_submit($form, &$form_state) {
  _siteprocessor_config_visual_clear_css();
  $color_keys=siteprocessor_config_visual_colors_get(array('keys_list'=>true));
  $color_list=array();
  foreach($color_keys as $key){
    if(isset($form_state['values'][$key])) {
      $color_list[$key]=$form_state['values'][$key];
    }
  }
  siteprocessor_config_visual_colors_set($color_list);
  drupal_set_message(t('Colors have been saved'), 'status');
}

/**
 * From http://www.php.net/manual/en/function.array-merge-recursive.php
 *
 * Merges arrays in many levels
 */
function MergeArrays($Arr1, $Arr2) {
  foreach($Arr2 as $key => $Value) {
    if(array_key_exists($key, $Arr1) && is_array($Value)) {
      $Arr1[$key] = MergeArrays($Arr1[$key], $Arr2[$key]);
    }
    else {
      $Arr1[$key] = $Value;
    }
  }
  return $Arr1;
}

/*
 * Sets the custom color CSS by getting custom colors and replacing the tags in the color template css files. Unmatched tags are set to magenta
 */
function siteprocessor_config_visual_color_get_css(){
  //FIXME: cache from here (with theme as key)
  if($css_cache=cache_get('siteprocessor_config_visual_color_generated_css','cache')){
    $css2add=$css_cache->data;
  }
  else{
    global $theme_key;
    $info_arr=siteprocessor_config_visual_parse_theme_info($theme_key);
    //skip if not supported by active theme
    if(!isset($info_arr['siteprocessor']['colors'])) return;

    $colors=siteprocessor_config_visual_colors_get(array('keys_values_list'=>true));

    $css2add='';
    foreach($info_arr['siteprocessor']['color_css'] as $theme=>$files){
      foreach($files as $file){
        $filename=drupal_get_path('theme',$theme).'/'.$file;
        if(file_exists($filename)) {
          $file_content=file_get_contents($filename);
          foreach($colors as $key=>$color){
            $file_content=str_replace("[[$key]]","#$color",$file_content);
          }
          $file_content=preg_replace('/(\[\[[A-Za-z0-9_-]+\]\])/','magenta',$file_content);
          $css2add.=$file_content;
        }
      }
    }
    cache_set('siteprocessor_config_visual_color_generated_css',$css2add,'cache');
  }
  //to here
  return $css2add;
}

/*
 * Returns parsed info from the chosen theme and all its subthemes
 */

function siteprocessor_config_visual_parse_theme_info($theme){
  $infofile=drupal_get_path('theme', $theme).'/'.$theme.'.info';
  $file_arr=drupal_parse_info_file($infofile);
  //check for basetheme
  if(isset($file_arr['base theme'])){
    $base_arr=siteprocessor_config_visual_parse_theme_info($file_arr['base theme']);
    //merge from basetheme info
    $file_arr=MergeArrays($base_arr,$file_arr);
  }

  //FIXME: register order of inherited themes
  $file_arr['siteprocessor']['theme_order'][]=$theme;
  return $file_arr;
}

/*
 * Returns a list of color groups defined in the themes, as a key=>value array
 */
function siteprocessor_config_visual_color_groups_get(){
  $theme=variable_get('theme_default','kaykay');
  $info_arr=siteprocessor_config_visual_parse_theme_info($theme);
  $color_groups=$info_arr['siteprocessor']['color_groups'];
  return $color_groups;
}

/*
 * Returns a list of color definitions defined in the themes, and merged with the customized colors stored in a variable. Can return various formats depending on args:
 *
 * keys_list=>true:
 *   returns a list of color keys
 *
 * keys_values_list=>true:
 *   returns a list of color keys and values
 *
 * Default:
 *   returns a structure
 *
 */
function siteprocessor_config_visual_colors_get($args=null){
  $theme=variable_get('theme_default','kaykay');
  $info_arr=siteprocessor_config_visual_parse_theme_info($theme);;
  //skip if not supported by active theme
  if(!isset($info_arr['siteprocessor']['colors'])) return array();
  $colors=$info_arr['siteprocessor']['colors'];

  //returns list of keys
  if($args){
    if(isset($args['keys_list'])){
      $keys=array();
      foreach($colors as $group){
        foreach($group as $key=>$item){
          $keys[]=$key;
        }
      }
      return $keys;
    }
  }

  //getting customized colors
  $colors_var=variable_get('siteprocessor_config_visual_colors', array());
  if(!is_array($colors_var)){
    $colors_var=array();
  }
  foreach($colors as $gkey=>$group){
    foreach($group as $key=>$item){
      if(isset($colors_var[$key])){
        $colors[$gkey][$key]['value']=$colors_var[$key];
      }
    }
  }

  //returns list of keys and values
  if($args){
    if(isset($args['keys_values_list'])){
      $list=array();
      foreach($colors as $group){
        foreach($group as $key=>$item){
          $list[$key]=$item['value'];
        }
      }
      return $list;
    }
  }

  //returns entire structure
  return $colors;
}


/*
 * Saves the custom colors in a variable
 */
function siteprocessor_config_visual_colors_set($color_list){
  variable_set('siteprocessor_config_visual_colors',$color_list);
  cache_clear_all('siteprocessor_config_visual_color_generated_css', 'cache');
}

